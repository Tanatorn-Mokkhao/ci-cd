/* eslint-disable no-console */
'use strict';

import objectAssign from 'object-assign';
export var LogLevels = {
  'DEBUG': 'DEBUG',
  'INFO': 'INFO',
  'WARN': 'WARN',
  'ERROR': 'ERROR',
  'NONE': 'NONE'
}; // DEBUG is the default. The log level is not specific to an SDK instance.

var GlobalLogLevel = LogLevels.DEBUG;
export var setLogLevel = function setLogLevel(level) {
  GlobalLogLevel = level;
};
var defaultOptions = {
  showLevel: true,
  displayAllErrors: false
};
export var Logger = /*#__PURE__*/function () {
  function Logger(category, options) {
    this.category = category;
    this.options = objectAssign({}, defaultOptions, options);
  }

  var _proto = Logger.prototype;

  _proto.debug = function debug(msg) {
    if (this._shouldLog(LogLevels.DEBUG)) this._log(LogLevels.DEBUG, msg);
  };

  _proto.info = function info(msg) {
    if (this._shouldLog(LogLevels.INFO)) this._log(LogLevels.INFO, msg);
  };

  _proto.warn = function warn(msg) {
    if (this._shouldLog(LogLevels.WARN)) this._log(LogLevels.WARN, msg);
  };

  _proto.error = function error(msg) {
    if (this.options.displayAllErrors || this._shouldLog(LogLevels.ERROR)) this._log(LogLevels.ERROR, msg);
  };

  _proto._log = function _log(level, text) {
    var formattedText = this._generateLogMessage(level, text);

    console.log(formattedText);
  };

  _proto._generateLogMessage = function _generateLogMessage(level, text) {
    var textPre = ' => ';
    var result = '';

    if (this.options.showLevel) {
      result += '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';
    }

    if (this.category) {
      result += this.category + textPre;
    }

    return result += text;
  };

  _proto._shouldLog = function _shouldLog(level) {
    var logLevel = GlobalLogLevel;
    var levels = Object.keys(LogLevels).map(function (f) {
      return LogLevels[f];
    });
    var index = levels.indexOf(level); // What's the index of what it's trying to check if it should log

    var levelIdx = levels.indexOf(logLevel); // What's the current log level index.

    return index >= levelIdx;
  };

  return Logger;
}();